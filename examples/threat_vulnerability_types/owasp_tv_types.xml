<?xml version="1.0"?>
<!DOCTYPE tvtypes PUBLIC "-//CAIRIS//DTD TVTYPES 1.0//EN" "http://cairis.org/dtd/tvtypes.dtd">

<!-- 
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->


<tvtypes>
<vulnerability_type name="API Abuse">
  <description>An API is a contract between a caller and a callee. The most common forms of API abuse are caused by the caller failing to honor its end of this contract. For example, if a program fails to call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller abuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.</description>
</vulnerability_type>
<vulnerability_type name="Authentication Vulnerability">
  <description>Authentication Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Authorisation Vulnerability">
  <description>Authorisation Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Availability Vulnerability">
  <description>Availability Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Code Permission Vulnerability">
  <description>Vulnerabilities related to code permissions.</description>
</vulnerability_type>
<vulnerability_type name="Code Quality Vulnerability">
  <description>Poor code quality leads to unpredictable behavior. From a user's perspective that often manifests itself as poor usability. For an attacker it provides an opportunity to stress the system in unexpected ways.</description>
</vulnerability_type>
<vulnerability_type name="Concurrency Vulnerability">
  <description>Concurrency Vulnerability</description>
</vulnerability_type>
<vulnerability_type name = "Configuration Vulnerability">
  <description>Configuration Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Cryptographic vulnerabilities">
  <description>Vulnerabilities related to cryptographic modules.</description>
</vulnerability_type>
<vulnerability_type name="Encoding Vulnerabilities">
  <description>Encoding Vulnerabilities</description>
</vulnerability_type>
<vulnerability_type name="Environmental Vulnerability">
  <description>This category includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this kingdom are not directly related to source code, we separated it from the rest of the kingdoms.</description>
</vulnerability_type>
<vulnerability_type name="Error Handling Vulnerability">
  <description>Error Handling Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="General Logic Error Vulnerability">
  <description>General Logic Error Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Input Validation Vulnerability">
  <description>Vulnerabilities related to input validation</description>
</vulnerability_type>
<vulnerability_type name="Logging and Auditing Vulnerability">
  <description>Logging and Auditing Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Password Management Vulnerability">
  <description>Password Management Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Path Vulnerability">
  <description>Path issues that allow attackers to access files that are not intended to be accessed. Generally, this is due to dynamically construction of a file path using unvalidated user input.</description>
</vulnerability_type>
<vulnerability_type name="Protocol Error">
  <description>Protocol Error</description>
</vulnerability_type>
<vulnerability_type name="Range and Type Error Vulnerability">
  <description>Range and Type Error Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Sensitive Data Protection Vulnerability">
  <description>This category is for tagging vulnerabilities that lead to insecure protection of sensitive data. The protection referred here includes confidentiality and integrity of data during its whole lifecycles, including storage and transmission.\n\nPlease note that this category is intended to be different from access control problems, although they both fail to protect data appropriately. Normally, the goal of access control is to grant data access to some users but not others. In this category, we are instead concerned about protection for sensitive data that are not intended to be revealed to or modified by any application users. Examples of this kind of sensitive data can be cryptographic keys, passwords, security tokens or any information that an application relies on for critical decisions.\n\nExamples of this vulnerability can be:\n\n    * Information leakage results from insufficient memory clean-up\n    * Inappropriate protection of cryptographic keys (This should also be labeled with Category:Cryptography)\n    * Clear-text Passwords in configration files (This should also labeled with Category:Authentication if the passwords are used for authentication.)\n    * Lack of integrity protection for stored user data</description>
</vulnerability_type>
<vulnerability_type name="Session Management Vulnerability">
  <description>Vulnerabilities related to session management</description>
</vulnerability_type>
<vulnerability_type name="Synchronisation and Timing Vulnerability">
  <description>Synchronisation and Timing Vulnerability</description>
</vulnerability_type>
<vulnerability_type name="Use of Dangerous API">
  <description>Use of Dangerous API</description>
</vulnerability_type>
<threat_type name="Abuse of Functionality">
  <description>Abuse of Functionality</description>
</threat_type>
<threat_type name="Data Structure Attack">
  <description>Data Structure Attack</description>
</threat_type>
<threat_type name="Embedded Malicious Code">
  <description>Embedded Malicious Code</description>
</threat_type>
<threat_type name="Exploitation of Authentication">
  <description>Exploitation of Authentication</description>
</threat_type>
<threat_type name="Injection">
  <description>Injection</description>
</threat_type>
<threat_type name="Path Traversal Attack">
  <description>Path Traversal Attack</description>
</threat_type>
<threat_type name="Probabilistic Techniques">
  <description>Probabilistic Techniques</description>
</threat_type>
<threat_type name="Protocol Manipulation">
  <description>Protocol Manipulation</description>
</threat_type>
<threat_type name="Resource Depletion">
  <description>Resource Depletion</description>
</threat_type>
<threat_type name="Resource Manipulation">
  <description>Resource Manipulation</description>
</threat_type>
<threat_type name="Sniffing Attacks">
  <description>Sniffing Attacks</description>
</threat_type>
<threat_type name="Spoofing">
  <description>Spoofing</description>
</threat_type>
</tvtypes>
